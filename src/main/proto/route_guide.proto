syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";
option objc_class_prefix = "RTG";

package routeguide;

// RouteGuide 서비스 정의합니다.
// 서비스가 제공하는 RPC 메서드를 선언하고, 각 메서드의 요청/응답 메시지를 정의합니다.
service RouteGuide {

    // 단순한 RPC
    // 클라이언트에서 요청를 보내고 서버의 응답을 리턴합니다
    rpc GetFeature(Point) returns (Feature) {}

    // 서버에서 클라이언트로 스트리밍하는 RPC
    // 클라이언트에서 요청을 보내고 서버로 부터 더이상 받을 메시지가 없을때까지
    // 스트림(sequence of messages)을 읽습니다
    // 스트림을 사용하기 위해서 stream 키워드를 사용합니다
    rpc ListFeatures(Rectangle) returns (stream Feature) {}

    // 클라이언트에서 서버로 스트리밍하는 RPC
    // 클라이언트에서 스트림을 모두 서버에 쓰고 끝나면 서버의 응답을 리턴합니다
    rpc RecordRoute(stream Point) returns (RouteSummary) {}

    // 양방향 스트리밍 RPC
    // 클라이언트와 서버가 서로 독립적으로 스트림을 읽고 씁니다.
    rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// 서비스의 요청/응답 메시지와 타입 정의를 작성합니다.
message Point {
    int32 latitude = 1;
    int32 longitude = 2;
}

message Rectangle {
    Point lo = 1;
    Point hi = 2;
}

message Feature {
    string name = 1;
    Point location = 2;
}

message FeatureDatabase {
    repeated Feature feature = 1;   // repeated를 사용하면 자바에서 List<Feature>로 생성
}

message RouteNote {
    Point location = 1;
    string message = 2;
}

message RouteSummary {
    int32 point_count = 1;  // <-- 추후 메시지 변화에 따른 하위 호환성을 위해서 숫자를 지정해야함.
    int32 feature_count = 2;
    int32 distance = 3;
    int32 elapsed_time = 4;
}